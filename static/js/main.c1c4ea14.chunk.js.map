{"version":3,"sources":["components/ClickableCell/index.tsx","providers/QueryProvider.tsx","hooks/useQuery.ts","utils/date.ts","components/ListItem/index.tsx","utils/api.ts","utils/string.ts","hooks/useFetch.ts","hooks/useSort.ts","App.tsx","index.tsx"],"names":["ClickableCell","children","onClick","handleClick","e","preventDefault","type","className","href","QueryContext","createContext","QueryProvider","useState","value","setValue","Provider","useQuery","param","useContext","newValue","setNewValue","useEffect","searchParams","URLSearchParams","window","location","search","get","set","newurl","origin","pathname","toString","history","pushState","path","getYear","date","Date","getFullYear","ListItem","id","firstName","lastName","year","handleCorsErrors","url","onSuccess","onError","a","baseUrl","process","secondaryUrl","urlWithProxy","replace","fetch","res","json","parsedData","useFetch","data","setData","loading","setLoading","error","setError","useCallback","useSort","sortedData","setSortedData","lastOrder","useRef","getSortedData","sortKey","current","result","sort","b","localeCompare","undefined","numeric","sortBy","key","App","paramValue","setParamValue","treatedData","useMemo","filter","user","map","first_name","last_name","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1c4ea14.chunk.js","sourcesContent":["type ClickableCellProps = {\n  onClick: () => void\n  type: 'td' | 'th'\n};\n\nconst ClickableCell: React.FC<ClickableCellProps> = ({children, onClick, type}) => {\n\n  const handleClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n    e.preventDefault()\n    onClick()\n  }\n\n  return type === 'td'\n    ? (\n      <td className=\"px-6 py-4 text-sm text-gray-500\">\n        <a className=\"h-10 px-5 text-gray-700 transition-colors duration-150 border border-gray-500 rounded-lg focus:shadow-outline hover:bg-graygray-500 hover:text-graygray-100\" href='/' onClick={handleClick}>\n          {children}\n        </a>\n      </td>\n    ) \n    : (\n      <th className=\"px-6 py-2 text-xs text-gray-500\">\n        <a className=\"h-10 px-5 text-gray-700 transition-colors duration-150 border border-gray-500 rounded-lg focus:shadow-outline hover:bg-graygray-500 hover:text-graygray-100\"  href='/' onClick={handleClick}>\n          {children}\n        </a>\n      </th>\n    )\n}\n\nexport default ClickableCell\n","import { createContext, useState, Dispatch, SetStateAction } from 'react'\n\ntype ContextValue = [string | null, Dispatch<SetStateAction<string | null>>]\n\nexport const QueryContext = createContext<ContextValue>([null, () => null])\n\nconst QueryProvider: React.FC = ({children}) => {\n  const [value, setValue] = useState<string | null>(null)\n\n  return (\n    <QueryContext.Provider value={[value, setValue]}>\n      {children}\n    </QueryContext.Provider>\n  )\n}\n\nexport default QueryProvider\n","import { useEffect, useContext } from 'react'\n\nimport { QueryContext } from '../providers/QueryProvider'\n\ntype ReturnType = [string | null, (value: string) => void]\n\nconst useQuery = (param: string): ReturnType => {\n  const [newValue, setNewValue] = useContext(QueryContext)\n\n  useEffect(() => {\n    const searchParams = new URLSearchParams(window.location.search);\n    setNewValue(searchParams.get(param))\n  }, [param, setNewValue])\n\n  const setValue = (value: string) => {\n    const searchParams = new URLSearchParams(window.location.search);\n    searchParams.set(param, value);\n    setNewValue(value)\n    const newurl = window.location.origin + window.location.pathname + '?' + searchParams.toString();\n    window.history.pushState({path: newurl}, '', newurl);\n  }\n\n  return [newValue, setValue]\n}\n\nexport default useQuery","export const getYear = (date: Date | string): number =>\n  date instanceof Date ? date.getFullYear() : new Date(date).getFullYear();\n","import ClickableCell from '../ClickableCell'\n\nimport useQuery from '../../hooks/useQuery';\n\nimport { getYear } from '../../utils/date'\n\ntype ListItemProps = {\n  id: number;\n  firstName: string;\n  lastName: string;\n  year: Date | string;\n};\n\nconst ListItem = ({id, firstName, lastName, year}: ListItemProps) => {\n  const [, setValue] = useQuery('year')\n\n  const handleYearSelect = () => {\n    setValue(getYear(year).toString())\n  }\n\n  return (\n    <tr className=\"whitespace-nowrap\">\n      <td className=\"px-6 py-4 text-sm text-gray-500\">{id}</td>\n      <td className=\"px-6 py-4 text-sm text-gray-500\">{firstName} {lastName}</td>\n      <ClickableCell type='td' onClick={handleYearSelect}>{getYear(year)}</ClickableCell>\n    </tr>\n  )\n}\n\nexport default ListItem\n","import {appendUrl} from './string'\n\nexport const handleCorsErrors = async <KData>(url: string, onSuccess: (res: KData) => void, onError: () => void) => {\n  const urlWithProxy = appendUrl(process.env.REACT_APP_CORS_API_URL ?? '', url)\n\n  try {\n    const res = await fetch(urlWithProxy);\n    const parsedData = await res.json();\n    onSuccess(parsedData)\n  } catch {\n    onError()\n  }\n}","export const appendUrl = (baseUrl: string, secondaryUrl: string): string => `${baseUrl}/${secondaryUrl.replace(/^https?:\\/\\//i, \"\")}`\n","import {useState, useCallback} from 'react';\n\nimport { handleCorsErrors } from '../utils/api'\n\ntype ReturnType<T> = [\n  {data: T | null; loading: boolean; error: boolean},\n  () => Promise<void>,\n];\n\nconst useFetch = <TData>(url: string): ReturnType<TData> => {\n  const [data, setData] = useState<TData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const beforeFetch = () => {\n    setData(null);\n    setError(false);\n    setLoading(true);\n  };\n\n  const fetchData = useCallback(async () => {\n    beforeFetch();\n\n    try {\n      const res = await fetch(url);\n      const parsedData = await res.json();\n      setData(parsedData);\n    } catch {\n      handleCorsErrors<TData>(url, (res) => setData(res),  () => setError(true))\n    } finally {\n      setLoading(false);\n    }\n  }, [url]);\n\n  return [{data, loading, error}, fetchData];\n};\n\nexport default useFetch;\n","import {useRef, useState, useEffect, useCallback} from 'react'\n\n\nconst useSort = (data: Array<{[key: string]: any}>): [Array<{[key: string]: any}>, (key: string) => void] => {\n  const [sortedData, setSortedData] = useState<Array<{[key: string]: any}>>(data)\n  const lastOrder = useRef<'ASC' | 'DESC'>('ASC')\n\n  const getSortedData = useCallback(\n    (sortKey) => {\n      if (!sortKey) {\n        setSortedData(data)\n      }\n\n      if (lastOrder.current === 'ASC') {\n        lastOrder.current = 'DESC'\n\n        const result = data.sort((a, b) => {\n          if (typeof a[sortKey] === 'number') {\n            return a[sortKey] - b[sortKey]\n          } else {\n            return a[sortKey]?.localeCompare(b[sortKey], undefined, {numeric: true})\n          }\n        })\n        setSortedData([...result])\n\n        return\n      }\n\n      lastOrder.current = 'ASC'\n\n      const result = data.sort((a, b) => {\n        if (typeof a[sortKey] === 'number') {\n          return b[sortKey] - a[sortKey]\n        } else {\n          return b[sortKey]?.localeCompare(a[sortKey], undefined, {numeric: true})\n        }\n      })\n      setSortedData([...result])\n    },\n    [data]\n  )\n\n  const sortBy = useCallback((key: string) => {\n    getSortedData(key)\n  }, [getSortedData])\n\n  useEffect(() => {\n    setSortedData(data)\n  }, [data])\n\n  return [sortedData, sortBy]\n}\n\nexport default useSort","import {useEffect, useMemo} from 'react'\n\nimport { ListItem, ClickableCell } from \"./components\";\n\nimport useFetch from './hooks/useFetch';\nimport useQuery from './hooks/useQuery';\nimport useSort from './hooks/useSort'\n\nimport { getYear } from './utils/date'\n\ntype User = {\n  id: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n  year: Date | string;\n};\n\nfunction App() {\n  const [{data, loading, error}, fetch] = useFetch<User[]>(process.env.REACT_APP_API_URL ?? '');\n  const [paramValue, setParamValue] = useQuery('year')\n  const [sortedData, sortBy] = useSort(data ?? [])\n\n  const treatedData = useMemo(() => sortedData.filter(user => {\n    if (paramValue) {\n      return getYear(user.year).toString() === paramValue\n    }\n    return true\n  }), [paramValue, sortedData])\n\n  useEffect(() => {\n    fetch();\n  }, [fetch]);\n\n  const handleClearYear = () => {\n    setParamValue('')\n  }\n\n  return (\n    <div className=\"w-screen flex flex-col\">\n      {loading && <p className=\"mx-auto mt-40 text-2xl\">Loading. Please, wait...</p>}\n      {error && (\n        <div className=\"mx-auto mt-40 flex flex-col\">\n          <p className=\"text-2xl text-red-600\">An error occurred. Please, try again.</p>\n          <button \n            className=\"mx-auto mt-5 h-10 px-5 text-gray-700 transition-colors duration-150 border border-gray-500 rounded-lg focus:shadow-outline hover:bg-graygray-500 hover:text-graygray-100\" \n            onClick={fetch}\n          >\n            Try again\n          </button>\n        </div>\n      )}\n      {paramValue && data && (\n        <button \n          className=\"mx-auto mt-5 h-10 px-5 text-gray-700 transition-colors duration-150 border border-gray-500 rounded-lg focus:shadow-outline hover:bg-graygray-500 hover:text-graygray-100\" \n          onClick={handleClearYear}\n        >\n          Clear year\n        </button>\n      )}\n      {data &&\n        (<table className={`w-1/3 mx-auto ${paramValue ? 'mt-5' : 'mt-20'}`} >\n          <tr className=\"bg-gray-50\">\n            <ClickableCell type='th' onClick={() => sortBy('id')}>ID</ClickableCell>\n            <ClickableCell type='th' onClick={() => sortBy('first_name')}>Full name</ClickableCell>\n            <ClickableCell type='th' onClick={() => sortBy('year')}>Year</ClickableCell>\n          </tr>\n          <tbody className=\"bg-white\">\n            {treatedData && treatedData.map(({id, first_name, last_name, year}) => (\n              <ListItem key={`list-item-${id}`} firstName={first_name} lastName={last_name} {...{id, year}}/>\n            ))}\n          </tbody>\n        </table>)\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport QueryProvider from './providers/QueryProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryProvider>\n      <App />\n    </QueryProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}